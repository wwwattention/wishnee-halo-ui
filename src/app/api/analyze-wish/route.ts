import { NextResponse } from 'next/server';
import type { WishAnalysis, WishCategory } from '@/lib/ai';

export async function POST(request: Request) {
  try {
    const { wish } = await request.json();

    if (!wish || typeof wish !== 'string') {
      return NextResponse.json(
        { error: 'Wish is required and must be a string' },
        { status: 400 }
      );
    }

    // ? ??????? ????? ????? ?????????? ? OpenAI ??? ?????? LLM
    // ?????? ???? ??? ??????????:
    /*
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `?? - ???????? ???????. ????????????? ??????? ???????????? ? ????????:
          1. ?????????: health, wealth, balance, growth, freedom ??? other
          2. ????????????? ??? (-1 ?? 1)
          3. ???????? ????? (?? 5)
          4. ??????????? ??? ?????????? (?? 3)
          ????? ????????? ? ??????? JSON.`
        },
        {
          role: "user",
          content: wish
        }
      ],
      response_format: { type: "json_object" }
    });

    const result = JSON.parse(completion.choices[0].message.content || '{}');
    
    return NextResponse.json(result);
    */

    // ???? ?????????? ????????? ?????? ???????
    const wishLower = wish.toLowerCase();
    
    // ?????????? ?????????
    let category: WishCategory = 'other';
    
    if (wishLower.includes('health') || wishLower.includes('????????')) {
      category = 'health';
    } else if (wishLower.includes('wealth') || wishLower.includes('money') || 
              wishLower.includes('?????????') || wishLower.includes('??????')) {
      category = 'wealth';
    } else if (wishLower.includes('balance') || wishLower.includes('??????')) {
      category = 'balance';
    } else if (wishLower.includes('growth') || wishLower.includes('????')) {
      category = 'growth';
    } else if (wishLower.includes('freedom') || wishLower.includes('???????')) {
      category = 'freedom';
    }
    
    // ?????????? ????????? (?????????)
    let sentiment = 0;
    const positiveWords = ['happy', 'good', 'great', 'love', 'hope', 'joy', '???????', '???????', '??????'];
    const negativeWords = ['fear', 'sad', 'hate', 'anger', 'anxiety', '?????', '??????', '?????????', '???????'];
    
    positiveWords.forEach(word => {
      if (wishLower.includes(word)) sentiment += 0.2;
    });
    
    negativeWords.forEach(word => {
      if (wishLower.includes(word)) sentiment -= 0.2;
    });
    
    // ???????????? ????????? ?????????? ?? -1 ?? 1
    sentiment = Math.max(-1, Math.min(1, sentiment));
    
    // ??????? ?????????? ???????? ????
    const words = wishLower.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "").split(/\s+/);
    const stopWords = ['the', 'and', 'a', 'to', 'of', 'in', 'for', 'with', 'is', 'on', 'that', 'this',
                      '?', '?', '?', '??', '?', '??', '?', '?', '?', '??', '??', '???'];
    
    const filteredWords = words.filter(word => !stopWords.includes(word) && word.length > 2);
    
    // ???????? ?? 5 ????? ??????? ???? ? ???????? ????????
    const keywords = filteredWords
      .sort((a, b) => b.length - a.length)
      .slice(0, 5);
    
    // ??????????? ? ??????????? ?? ?????????
    let suggestions: string[] = [];
    
    switch (category) {
      case 'health':
        suggestions = [
          '??????????? ?????????? ?????????? ??????????',
          '??????? ?? ????? ????????',
          '???????? ???????? ???????????? ????????'
        ];
        break;
      case 'wealth':
        suggestions = [
          '???????? ???? ??????????? ????????',
          '???????????? ????????? ? ? ????',
          '?????????? ???????? ???????????????? ??????'
        ];
        break;
      case 'balance':
        suggestions = [
          '??????????? ????????? ? ????????????',
          '???????? ????? ??? ??????',
          '???????? ???????? ???? ?????? ?????'
        ];
        break;
      case 'growth':
        suggestions = [
          '??????? ?????????? ???? ????????',
          '??????? ? ??????? ?????? ????',
          '???????? ???????? ? ????????????? ?????'
        ];
        break;
      case 'freedom':
        suggestions = [
          '????????? ??? ?????????? ??????????????',
          '????????? ?????, ?????????? ?? ???????',
          '?????????? ?????? ?????????????????'
        ];
        break;
      default:
        suggestions = [
          '?????????? ?????????? ???? ??? ?????????? ????',
          '?????????????? ???????? ?????????',
          '???????? ?????? ?????? ? ????????'
        ];
    }
    
    const analysis: WishAnalysis = {
      category,
      sentiment,
      keywords,
      suggestions
    };

    return NextResponse.json(analysis);
  } catch (error) {
    console.error('Error analyzing wish:', error);
    return NextResponse.json(
      { error: 'Failed to analyze wish' },
      { status: 500 }
    );
  }
}
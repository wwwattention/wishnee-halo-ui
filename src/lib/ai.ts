// ???? ??? ????????? ???????
export type WishCategory = 'health' | 'wealth' | 'balance' | 'growth' | 'freedom' | 'other';

// ????????? ??? ??????????? ??????? ???????
export interface WishAnalysis {
  category: WishCategory;
  sentiment: number; // ?? -1 ?? 1
  keywords: string[];
  suggestions: string[];
}

/**
 * ??????? ?????? ??????? ??? ????????????? ??????? API
 * ? ??????? ???? ????? ????? ???????? ?? ?????? ? OpenAI ??? ??????? LLM
 */
export function analyzeWishLocally(wish: string): WishAnalysis {
  const wishLower = wish.toLowerCase();
  
  // ?????????? ?????????
  let category: WishCategory = 'other';
  
  if (wishLower.includes('health') || wishLower.includes('????????') || 
      wishLower.includes('heal') || wishLower.includes('???????')) {
    category = 'health';
  } else if (wishLower.includes('wealth') || wishLower.includes('money') || 
             wishLower.includes('rich') || wishLower.includes('?????????') || 
             wishLower.includes('??????')) {
    category = 'wealth';
  } else if (wishLower.includes('balance') || wishLower.includes('??????') || 
             wishLower.includes('harmony') || wishLower.includes('????????')) {
    category = 'balance';
  } else if (wishLower.includes('growth') || wishLower.includes('????') || 
             wishLower.includes('develop') || wishLower.includes('????????')) {
    category = 'growth';
  } else if (wishLower.includes('freedom') || wishLower.includes('???????') || 
             wishLower.includes('free') || wishLower.includes('?????????????')) {
    category = 'freedom';
  }
  
  // ?????????? ????????? (?????????)
  let sentiment = 0;
  const positiveWords = ['happy', 'good', 'great', 'love', 'hope', 'joy', '???????', '???????', '??????'];
  const negativeWords = ['fear', 'sad', 'hate', 'anger', 'anxiety', '?????', '??????', '?????????', '???????'];
  
  positiveWords.forEach(word => {
    if (wishLower.includes(word)) sentiment += 0.2;
  });
  
  negativeWords.forEach(word => {
    if (wishLower.includes(word)) sentiment -= 0.2;
  });
  
  // ???????????? ????????? ?????????? ?? -1 ?? 1
  sentiment = Math.max(-1, Math.min(1, sentiment));
  
  // ??????? ?????????? ???????? ????
  const words = wishLower.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "").split(/\s+/);
  const stopWords = ['the', 'and', 'a', 'to', 'of', 'in', 'for', 'with', 'is', 'on', 'that', 'this',
                     '?', '?', '?', '??', '?', '??', '?', '?', '?', '??', '??', '???'];
  
  const filteredWords = words.filter(word => !stopWords.includes(word) && word.length > 2);
  
  // ???????? ?? 5 ????? ??????? ???? ? ???????? ????????
  const keywords = filteredWords
    .sort((a, b) => b.length - a.length)
    .slice(0, 5);
  
  // ??????????? ? ??????????? ?? ?????????
  let suggestions: string[] = [];
  
  switch (category) {
    case 'health':
      suggestions = [
        '??????????? ?????????? ?????????? ??????????',
        '??????? ?? ????? ????????',
        '???????? ???????? ???????????? ????????'
      ];
      break;
    case 'wealth':
      suggestions = [
        '???????? ???? ??????????? ????????',
        '???????????? ????????? ? ? ????',
        '?????????? ???????? ???????????????? ??????'
      ];
      break;
    case 'balance':
      suggestions = [
        '??????????? ????????? ? ????????????',
        '???????? ????? ??? ??????',
        '???????? ???????? ???? ?????? ?????'
      ];
      break;
    case 'growth':
      suggestions = [
        '??????? ?????????? ???? ????????',
        '??????? ? ??????? ?????? ????',
        '???????? ???????? ? ????????????? ?????'
      ];
      break;
    case 'freedom':
      suggestions = [
        '????????? ??? ?????????? ??????????????',
        '????????? ?????, ?????????? ?? ???????',
        '?????????? ?????? ?????????????????'
      ];
      break;
    default:
      suggestions = [
        '?????????? ?????????? ???? ??? ?????????? ????',
        '?????????????? ???????? ?????????',
        '???????? ?????? ?????? ? ????????'
      ];
  }
  
  return {
    category,
    sentiment,
    keywords,
    suggestions
  };
}

/**
 * ?????????? ? ??????? API ??? ??????? ???????
 * ???????????????? ? ?????????, ????? ?????? ?????? ???????????? OpenAI
 */
/*
export async function analyzeWish(wish: string): Promise<WishAnalysis> {
  try {
    const response = await fetch('/api/analyze-wish', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ wish }),
    });

    if (!response.ok) {
      throw new Error('Failed to analyze wish');
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Error analyzing wish:', error);
    // ? ?????? ?????? ?????????? ????????? ??????
    return analyzeWishLocally(wish);
  }
}
*/

// ???????? ?????????? ????????? ??????
export const analyzeWish = analyzeWishLocally;